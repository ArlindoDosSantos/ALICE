#definition des 5 profils pour la typologie
profil1 = c(50,20,15,10,5)
profil2 = c(30,25,20,15,10)
profil3 = c(20,20,20,20,20)
profil4 = c(10,15,20,25,30)
profil5 = c(5,10,15,20,50)

#calculs des classes pour la typologie sur la mixite
#calcul de la distance a chacun des profils : distance issue de khi2
grid@data$dist_pro1 = (grid@data$tx_pop_q1 - profil1[1])^2 /  (grid@data$tx_pop_q1 +  profil1[1]) + 
                      (grid@data$tx_pop_q2 - profil1[2])^2 /  (grid@data$tx_pop_q2 +  profil1[2]) + 
                      (grid@data$tx_pop_q3 - profil1[3])^2 /  (grid@data$tx_pop_q3 +  profil1[3]) + 
                      (grid@data$tx_pop_q4 - profil1[4])^2 /  (grid@data$tx_pop_q4 +  profil1[4]) + 
                      (grid@data$tx_pop_q5 - profil1[5])^2 /  (grid@data$tx_pop_q5 +  profil1[5]) 

grid@data$dist_pro2 = (grid@data$tx_pop_q1 - profil2[1])^2 /  (grid@data$tx_pop_q1 +  profil2[1]) + 
                      (grid@data$tx_pop_q2 - profil2[2])^2 /  (grid@data$tx_pop_q2 +  profil2[2]) + 
                      (grid@data$tx_pop_q3 - profil2[3])^2 /  (grid@data$tx_pop_q3 +  profil2[3]) + 
                      (grid@data$tx_pop_q4 - profil2[4])^2 /  (grid@data$tx_pop_q4 +  profil2[4]) + 
                      (grid@data$tx_pop_q5 - profil2[5])^2 /  (grid@data$tx_pop_q5 +  profil2[5]) 

grid@data$dist_pro3 = (grid@data$tx_pop_q1 - profil3[1])^2 /  (grid@data$tx_pop_q1 +  profil3[1]) + 
                      (grid@data$tx_pop_q2 - profil3[2])^2 /  (grid@data$tx_pop_q2 +  profil3[2]) + 
                      (grid@data$tx_pop_q3 - profil3[3])^2 /  (grid@data$tx_pop_q3 +  profil3[3]) + 
                      (grid@data$tx_pop_q4 - profil3[4])^2 /  (grid@data$tx_pop_q4 +  profil3[4]) + 
                      (grid@data$tx_pop_q5 - profil3[5])^2 /  (grid@data$tx_pop_q5 +  profil3[5])  

grid@data$dist_pro4 = (grid@data$tx_pop_q1 - profil3[1])^2 /  (grid@data$tx_pop_q1 +  profil3[1]) + 
                      (grid@data$tx_pop_q2 - profil4[2])^2 /  (grid@data$tx_pop_q2 +  profil4[2]) + 
                      (grid@data$tx_pop_q3 - profil4[3])^2 /  (grid@data$tx_pop_q3 +  profil4[3]) + 
                      (grid@data$tx_pop_q4 - profil4[4])^2 /  (grid@data$tx_pop_q4 +  profil4[4]) + 
                      (grid@data$tx_pop_q5 - profil4[5])^2 /  (grid@data$tx_pop_q5 +  profil4[5]) 

grid@data$dist_pro5 = (grid@data$tx_pop_q1 - profil5[1])^2 /  (grid@data$tx_pop_q1 +  profil5[1]) + 
                      (grid@data$tx_pop_q2 - profil5[2])^2 /  (grid@data$tx_pop_q2 +  profil5[2]) + 
                      (grid@data$tx_pop_q3 - profil5[3])^2 /  (grid@data$tx_pop_q3 +  profil5[3]) + 
                      (grid@data$tx_pop_q4 - profil5[4])^2 /  (grid@data$tx_pop_q4 +  profil5[4]) + 
                      (grid@data$tx_pop_q5 - profil5[5])^2 /  (grid@data$tx_pop_q5 +  profil5[5]) 

#la dist minimale
grid@data<- transform(grid@data, distmin = pmin(grid@data$dist_pro1, grid@data$dist_pro2,
                                                grid@data$dist_pro3, grid@data$dist_pro4, 
                                                grid@data$dist_pro5))

#affectation au profil auquel la dist est minimale
#voir les cas eventuels où on n'affecte aucun profil : nbObs trop faible ...
for (i in 1:nrow(grid@data)) {
  if (grid@data$distmin[i]==grid@data$dist_pro1[i]) 
  {grid@data$classe[i]<- 1
  }else if (grid@data$distmin[i]==grid@data$dist_pro2[i]) {grid@data$classe[i]<- 2
  }else if (grid@data$distmin[i]==grid@data$dist_pro3[i]) {grid@data$classe[i]<- 3
  }else if (grid@data$distmin[i]==grid@data$dist_pro4[i]) {grid@data$classe[i]<- 4
  }else {grid@data$classe[i]<- 5}
}


#suppression des variables inutiles
grid@data <- grid@data[, ! names(grid@data) %in% c("niv_x_pop","dec_x_pop","dis_x_pop",
                                                   "dist_pro1","dist_pro2","dist_pro3","dist_pro4",
                                                   "dist_pro5")]