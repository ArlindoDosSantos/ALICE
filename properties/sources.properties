###############################################################################
# Fichier permettant de paramétrer le lissage spécifiquement 
# pour chaque millésime de chaque source
# 
# RG 01 : le motif délimitant la clé de sa valeur est ":=" et non "=" ou ":"
#		(entorse aux conventions classique d'écriture d'un fichier property 
#		afin de pouvoir mettre du code R sur plusieurs ligne et contenant des " =" ou ":")
# RG 02 : ne pas mettre d'espace avant le ":="
# RG 03 : pour éviter un warning inutile, finir le fichier par une ligne vide
# RG 04 : Le nom du répertoire contenant les sources de données ("filosofi") et le fichier de données (2012.db) doit être identique au nom utilisé dans la clé de ce fichier property
#			exemple: "D:/bases/Paris/filosofi/2012.db"  => clé property "filosofi.2012.traitementPostLissage"
# RG 05 : post-lissage - les instructions portent sur un objet Grid nommé dfLisse 
# RG 06 : post-lissage - plusieurs instructions post lissage peuvent être indiquées pour une même clé (sur la même ligne ou sur plusieurs lignes)
#						 mais la première instruction doit se trouver sur la ligne de la clé
# RG 07 : la clé source.annee.colonnesLissageClassique permet d'indiquer les colonnes à prendre dans la base en entrée (ne pas oublier de préciser les colonnes x et y)
# RG 08 : la clé source.annee.colonnesLissageClassique accepte aussi bien la liste exhaustive des colonne que le "*" pour indiquer toutes les colonnes
############################################################################### 

############################  filosofi 2012 ###################################
filosofi.2012.colonnesLissageClassique:= *
filosofi.2012.traitementPostLissage:= 	dfLisse$tx_mono <- round(100 * dfLisse$m_mono / dfLisse$men)
										dfLisse$tx_mon_pa <- round(100 * dfLisse$m_mono_pa / dfLisse$men)
										dfLisse$tx_cosenf <- round(100 * dfLisse$m_cossenf / dfLisse$men)
										dfLisse$tx_coenf <- round(100 * dfLisse$m_coenf / dfLisse$men)
										dfLisse$tx_fseul <- round(100 * dfLisse$m_fseul / dfLisse$men)
										dfLisse$tx_hseul <- round(100 * dfLisse$m_hseul / dfLisse$men)
										dfLisse$tx_5p <- round(100 * dfLisse$m_5p / dfLisse$men)
										dfLisse$tx_5p_pa <- round(100 * dfLisse$m_5p_pa / dfLisse$men)
										dfLisse$tx_rev_sa <- round(100 * dfLisse$m_rev_sal / dfLisse$men)
										dfLisse$tx_rev_ch <- round(100 * dfLisse$m_rev_cho / dfLisse$men)
										dfLisse$tx_rev_ns <- round(100 * dfLisse$m_rev_nsa / dfLisse$men)
										dfLisse$tx_rev_re <- round(100 * dfLisse$m_rev_ret / dfLisse$men)
										dfLisse$tx_pop_pa <- round(100 * dfLisse$pop_pa / dfLisse$pop)
										dfLisse$tx_popd1 <- round(100 * dfLisse$pop_d1 / dfLisse$pop)
										dfLisse$tx_popd10 <- round(100 * dfLisse$pop_d10 / dfLisse$pop)
										dfLisse$tx_pop_q1 <- round(100 * dfLisse$pop_q1 / dfLisse$pop)
										dfLisse$tx_pop_q2 <- round(100 * dfLisse$pop_q2 / dfLisse$pop)
										dfLisse$tx_pop_q3 <- round(100 * dfLisse$pop_q3 / dfLisse$pop)
										dfLisse$tx_pop_q4 <- round(100 * dfLisse$pop_q4 / dfLisse$pop)
										dfLisse$tx_pop_q5 <- round(100 * dfLisse$pop_q5 / dfLisse$pop)

										#calcul des revenus moyens
										dfLisse$niv_moy <- dfLisse$niv_x_pop / dfLisse$pop 
										dfLisse$dis_moy <- dfLisse$dis_x_pop / dfLisse$pop 
										dfLisse$dec_moy <- dfLisse$dec_x_pop / dfLisse$pop 
										
										#suppression des variables inutiles
										dfLisse <- dfLisse[, ! names(dfLisse) %in% c("niv_x_pop", "dec_x_pop", "dis_x_pop")]

############################  filosofi 2013 ###################################
filosofi.2013.colonnesLissageClassique:= *
filosofi.2013.traitementPostLissage:= 	dfLisse$tx_mono <- round(100 * dfLisse$m_mono / dfLisse$men)
										dfLisse$tx_mon_pa <- round(100 * dfLisse$m_mono_pa / dfLisse$men)
										dfLisse$tx_cosenf <- round(100 * dfLisse$m_cossenf / dfLisse$men)
										dfLisse$tx_coenf <- round(100 * dfLisse$m_coenf / dfLisse$men)
										dfLisse$tx_fseul <- round(100 * dfLisse$m_fseul / dfLisse$men)
										dfLisse$tx_hseul <- round(100 * dfLisse$m_hseul / dfLisse$men)
										dfLisse$tx_5p <- round(100 * dfLisse$m_5p / dfLisse$men)
										dfLisse$tx_5p_pa <- round(100 * dfLisse$m_5p_pa / dfLisse$men)
										dfLisse$tx_rev_sa <- round(100 * dfLisse$m_rev_sal / dfLisse$men)
										dfLisse$tx_rev_ch <- round(100 * dfLisse$m_rev_cho / dfLisse$men)
										dfLisse$tx_rev_ns <- round(100 * dfLisse$m_rev_nsa / dfLisse$men)
										dfLisse$tx_rev_re <- round(100 * dfLisse$m_rev_ret / dfLisse$men)
										dfLisse$tx_pop_pa <- round(100 * dfLisse$pop_pa / dfLisse$pop)
										dfLisse$tx_popd1 <- round(100 * dfLisse$pop_d1 / dfLisse$pop)
										dfLisse$tx_popd10 <- round(100 * dfLisse$pop_d10 / dfLisse$pop)
										dfLisse$tx_pop_q1 <- round(100 * dfLisse$pop_q1 / dfLisse$pop)
										dfLisse$tx_pop_q2 <- round(100 * dfLisse$pop_q2 / dfLisse$pop)
										dfLisse$tx_pop_q3 <- round(100 * dfLisse$pop_q3 / dfLisse$pop)
										dfLisse$tx_pop_q4 <- round(100 * dfLisse$pop_q4 / dfLisse$pop)
										dfLisse$tx_pop_q5 <- round(100 * dfLisse$pop_q5 / dfLisse$pop)

										#calcul des revenus moyens
										dfLisse$niv_moy <- dfLisse$niv_x_pop / dfLisse$pop 
										dfLisse$dis_moy <- dfLisse$dis_x_pop / dfLisse$pop 
										dfLisse$dec_moy <- dfLisse$dec_x_pop / dfLisse$pop 
										
										#suppression des variables inutiles
										dfLisse <- dfLisse[, ! names(dfLisse) %in% c("niv_x_pop", "dec_x_pop", "dis_x_pop")]
