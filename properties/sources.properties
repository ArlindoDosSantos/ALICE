###############################################################################
# Fichier permettant de paramétrer le lissage spécifiquement 
# pour chaque millésime de chaque source
# 
# RG 01 : Le nom du répertoire contenant le fichier de données (*.db) doit être identique au nom utilisé dans la clé de ce fichier property (Sensible à la casse)
#			exemple: "D:/bases/Paris/filosofi/2012.db"  => clé property "filosofi.2012.traitementPostLissage"
# RG 02 : le motif délimitant la clé de sa valeur est ":=" et non "=" ou ":"
#		(entorse aux conventions classique d'écriture d'un fichier property 
#		afin de pouvoir mettre du code R sur plusieurs ligne et contenant des "=" ou ":")
# RG 03 : ne pas mettre d'espace avant le ":="
# RG 04 : pour éviter un warning inutile, finir le fichier par une ligne vide

# RG 05 : section source.annee.traitementPostLissage -> si la colonne nbObsLisse est supprimée lors du traitement post lissage, l'élagage de performance n'est pas effecté
# RG 06 : section source.annee.traitementPostLissage -> ne pas mettre de commentaires ni de lignes vide entre les instructions (sinon les instructions suivantes seront ignorées)
# RG 07 : section source.annee.traitementPostLissage -> les instructions portent sur un objet Grid nommé dfLisse 
# RG 08 : section source.annee.traitementPostLissage -> plusieurs instructions post lissage peuvent être indiquées pour une même clé (sur la même ligne ou sur plusieurs lignes)
#		  mais la première instruction doit se trouver sur la ligne de la clé

# RG 09 : section source.annee.traitementPostLissage -> une instruction ne peut pas se poursuivre sur plusieurs lignes

# RG 10 : section source.annee.colonnesLissageClassique -> permet d'indiquer les colonnes à prendre dans la base en entrée (ne pas oublier de préciser les colonnes x et y)
# RG 11 : section source.annee.colonnesLissageClassique -> accepte aussi bien la liste exhaustive des colonne que le "*" pour indiquer toutes les colonnes

# RG 12 : section source.variables -> valeur sous la forme nom=>diffusible=>description
# RG 13 : section source.variables -> les éléments sont également des clé/valeur; le séparateur utilisé est le "=>"
# RG 14 : section source.variables -> le descriptif doit tenir sur une seule ligne et ne pas utiliser de ";"
############################################################################### 

nbSources:=3
source.1:=filosofi
source.2:=cnaf
source.3:=cnam

############################  filosofi  ###################################
filosofi.variables:=	pop=>non=>population (nombre d'individus)
						men=>non=>nombre de ménages
						taille_Men=>non=>taille moyenne des ménages
						m_mono=>non=>nombre de ménages monoparentaux
						m_mcossenf=>non=>nombre de ménages composé d'un couple sans enfant
						m_coenf=>non=>nombre de ménages composé d'un couple avec enfant(s)
						m_fseul=>non=>nombre de ménages composés d'une femme seule
						m_hseul=>non=>nombre de ménages composés d'un homme seul
						m_5p=>non=>nombre de ménages composés de 5 personnes ou plus
						m_5p_pa=>non=>nombre de ménages pauvres composés de 5 personnes ou plus
						m_rev_sal=>non=>nombre de ménages dont l'origine principale des revenus déclarés sont les salaires et traitements hors indemnités de chômage
						m_rev_cho=>non=>nombre de ménages dont l'origine principale des revenus déclarés sont les indemnités de chômage
						m_rev_nsa=>non=>nombre de ménages dont l'origine principale des revenus déclarés sont les revenus d'activités non salariées
						m_rev_ret=>non=>nombre de ménages dont l'origine principale des revenus déclarés sont les pensions, retraites et rentes
						pop_pa=>non=>population vivant en dessous du seuil de pauvreté (défini à 60%)
						pop_d1=>non=>population des ménages dont le niveau de vie est inférieur à d1  (base : niveau de vie France métropolitaine)
						pop_d10=>non=>population des ménages dont le niveau de vie est supérieur à d9  (base : niveau de vie France métropolitaine)
						pop_q1=>non=>population dont le niveau de vie est inférieur au 1er quintile (base : niveau de vie France métropolitaine)
						pop_q2=>non=>population dont le niveau de vie est compris entre le 1er et le 2ème quintile (base : niveau de vie France métropolitaine)
						pop_q3=>non=>population dont le niveau de vie est compris entre le 2eme et le 3ème quintile (base : niveau de vie France métropolitaine)
						pop_q4=>non=>population dont le niveau de vie est compris entre le 3eme et le 4ème quintile (base : niveau de vie France métropolitaine)
						pop_q5=>non=>population dont le niveau de vie est compris entre le 4eme et le 5ème quintile (base : niveau de vie France métropolitaine)
						tx_mono=>non=>part des ménages monoparentaux dans l'ensemble des ménages
						tx_mon_pa=>non=>part des ménages monoparentaux vivant en dessous du seuil de pauvreté dans l'ensemble des ménages
						tx_cosenf=>non=>part des ménages composés d'un couple sans enfant dans l'ensemble des ménages
						tx_coenf=>non=>part des ménages composés d'un  couple avec enfant(s) dans l'ensemble des ménages
						tx_fseul=>non=>part des ménages composés d'une femme seule dans l'ensemble des ménages
						tx_hseul=>non=>part des ménages composés d'un homme seul dans l'ensemble des ménages
						tx_5p=>non=>part des ménages de 5 personnes ou plus dans l'ensemble des ménages
						tx_5p_pa=>non=>part des ménages de 5 personnes ou plus vivant en dessous du seuil de pauvreté dans l'ensemble des ménages
						tx_rev_sa=>non=>part des ménages dont l'origine principale des revenus déclarés sont les salaires et traitements hors indemnités de chômage, dans l'ensemble des ménages
						tx_rev_ch=>non=>part des ménages dont l'origine principale des revenus déclarés sont les indemnités de chômage, dans l'ensemble des ménages
						tx_rev_ns=>non=>part des ménages dont l'origine principale des revenus déclarés sont les revenus d'activités non salariées, dans l'ensemble des ménages
						tx_rev_re=>non=>part des ménages dont l'origine principale des revenus déclarés sont les pensions, retraites et rentes
						tx_pop_pa=>non=>taux de pauvreté (population pauvre/population)
						tx_popd1=>non=>part de la population dont le niveau de vie est inférieur à d1  (base : niveau de vie France métropolitaine)
						tx_popd10=>non=>part de la population dont le niveau de vie est supérieur à d9  (base : niveau de vie France métropolitaine)
						tx_pop_q1=>non=>part de la population dont le niveau de vie est inférieur au 1er quintile (base : niveau de vie France métropolitaine)
						tx_pop_q2=>non=>part de la population dont le niveau de vie est compris entre le 1er et le 2ème quintile (base : niveau de vie France métropolitaine)
						tx_pop_q3=>non=>part de la population dont le niveau de vie est compris entre le 2eme et le 3ème quintile (base : niveau de vie France métropolitaine)
						tx_pop_q4=>non=>part de la population dont le niveau de vie est compris entre le 3eme et le 4ème quintile (base : niveau de vie France métropolitaine)
						tx_pop_q5=>non=>part de la population dont le niveau de vie est compris entre le 4eme et le 5ème quintile (base : niveau de vie France métropolitaine)
						niv_moy=>non=>niveau de vie moyen (ratio : "niveau de vie * population" / "population")
						dis_moy=>non=>revenu disponible moyen (ratio : "revenu disponible * population" / "population")
						dec_moy=>non=>revenu déclaré moyen (ratio : "revenu déclaré * population" / "population")
						typMixSoc=>non=>classe de la typologie sur la mixité sociale (cf. p37 à p45 www.ville.gouv.fr/IMG/pdf/rapport-onzus-2012.pdf). Nous avons défini 5 profils. profil 1 : (50,20,15,10, 5) - profil 2 : (30,25,20,15,10) -  profil 3 : (20,20,20,20,20) - profil 4 : (10,15,20,25,30) - profil 5 : ( 5,10,15,20,50). Les carreaux sont classés dans le profil dont ils sont les plus proches. Les quintiles se rapportent à la France toute entière.


############################  filosofi 2012 ###################################
filosofi.2012.colonnesLissageClassique:= *
filosofi.2012.traitementPostLissage:= 	dfLisse$tx_mono <- round(100 * dfLisse$m_mono / dfLisse$men)
										dfLisse$tailleMen <- dfLisse$pop / dfLisse$men
										dfLisse$tx_mon_pa <- round(100 * dfLisse$m_mono_pa / dfLisse$men)
										dfLisse$tx_cosenf <- round(100 * dfLisse$m_cossenf / dfLisse$men)
										dfLisse$tx_coenf <- round(100 * dfLisse$m_coenf / dfLisse$men)
										dfLisse$tx_fseul <- round(100 * dfLisse$m_fseul / dfLisse$men)
										dfLisse$tx_hseul <- round(100 * dfLisse$m_hseul / dfLisse$men)
										dfLisse$tx_5p <- round(100 * dfLisse$m_5p / dfLisse$men)
										dfLisse$tx_5p_pa <- round(100 * dfLisse$m_5p_pa / dfLisse$men)
										dfLisse$tx_rev_sa <- round(100 * dfLisse$m_rev_sal / dfLisse$men)
										dfLisse$tx_rev_ch <- round(100 * dfLisse$m_rev_cho / dfLisse$men)
										dfLisse$tx_rev_ns <- round(100 * dfLisse$m_rev_nsa / dfLisse$men)
										dfLisse$tx_rev_re <- round(100 * dfLisse$m_rev_ret / dfLisse$men)
										dfLisse$tx_pop_pa <- round(100 * dfLisse$pop_pa / dfLisse$pop)
										dfLisse$tx_popd1 <- round(100 * dfLisse$pop_d1 / dfLisse$pop)
										dfLisse$tx_popd10 <- round(100 * dfLisse$pop_d10 / dfLisse$pop)
										dfLisse$tx_pop_q1 <- round(100 * dfLisse$pop_q1 / dfLisse$pop)
										dfLisse$tx_pop_q2 <- round(100 * dfLisse$pop_q2 / dfLisse$pop)
										dfLisse$tx_pop_q3 <- round(100 * dfLisse$pop_q3 / dfLisse$pop)
										dfLisse$tx_pop_q4 <- round(100 * dfLisse$pop_q4 / dfLisse$pop)
										dfLisse$tx_pop_q5 <- round(100 * dfLisse$pop_q5 / dfLisse$pop)
										dfLisse$niv_moy <- dfLisse$niv_x_pop / dfLisse$pop
										dfLisse$dis_moy <- dfLisse$dis_x_pop / dfLisse$pop
										dfLisse$dec_moy <- dfLisse$dec_x_pop / dfLisse$pop
										profil1 <- c(50,20,15,10,5)
										profil2 <- c(30,25,20,15,10)
										profil3 <- c(20,20,20,20,20)
										profil4 <- c(10,15,20,25,30)
										profil5 <- c(5,10,15,20,50)
										dfLisse$dist_pro1 <- (dfLisse$tx_pop_q1 - profil1[1])^2 / (dfLisse$tx_pop_q1 + profil1[1]) + (dfLisse$tx_pop_q2 - profil1[2])^2 / (dfLisse$tx_pop_q2 + profil1[2]) + (dfLisse$tx_pop_q3 - profil1[3])^2 / (dfLisse$tx_pop_q3 + profil1[3]) + (dfLisse$tx_pop_q4 - profil1[4])^2 / (dfLisse$tx_pop_q4 + profil1[4]) + (dfLisse$tx_pop_q5 - profil1[5])^2 / (dfLisse$tx_pop_q5 + profil1[5])
										dfLisse$dist_pro2 <- (dfLisse$tx_pop_q1 - profil2[1])^2 / (dfLisse$tx_pop_q1 + profil2[1]) + (dfLisse$tx_pop_q2 - profil2[2])^2 / (dfLisse$tx_pop_q2 + profil2[2]) + (dfLisse$tx_pop_q3 - profil2[3])^2 / (dfLisse$tx_pop_q3 + profil2[3]) + (dfLisse$tx_pop_q4 - profil2[4])^2 / (dfLisse$tx_pop_q4 + profil2[4]) + (dfLisse$tx_pop_q5 - profil2[5])^2 / (dfLisse$tx_pop_q5 + profil2[5])
										dfLisse$dist_pro3 <- (dfLisse$tx_pop_q1 - profil3[1])^2 / (dfLisse$tx_pop_q1 + profil3[1]) + (dfLisse$tx_pop_q2 - profil3[2])^2 / (dfLisse$tx_pop_q2 + profil3[2]) + (dfLisse$tx_pop_q3 - profil3[3])^2 / (dfLisse$tx_pop_q3 + profil3[3]) + (dfLisse$tx_pop_q4 - profil3[4])^2 / (dfLisse$tx_pop_q4 + profil3[4]) + (dfLisse$tx_pop_q5 - profil3[5])^2 / (dfLisse$tx_pop_q5 + profil3[5])
										dfLisse$dist_pro4 <- (dfLisse$tx_pop_q1 - profil4[1])^2 / (dfLisse$tx_pop_q1 + profil4[1]) + (dfLisse$tx_pop_q2 - profil4[2])^2 / (dfLisse$tx_pop_q2 + profil4[2]) + (dfLisse$tx_pop_q3 - profil4[3])^2 / (dfLisse$tx_pop_q3 + profil4[3]) + (dfLisse$tx_pop_q4 - profil4[4])^2 / (dfLisse$tx_pop_q4 + profil4[4]) + (dfLisse$tx_pop_q5 - profil4[5])^2 / (dfLisse$tx_pop_q5 + profil4[5])
										dfLisse$dist_pro5 <- (dfLisse$tx_pop_q1 - profil5[1])^2 / (dfLisse$tx_pop_q1 + profil5[1]) + (dfLisse$tx_pop_q2 - profil5[2])^2 / (dfLisse$tx_pop_q2 + profil5[2]) + (dfLisse$tx_pop_q3 - profil5[3])^2 / (dfLisse$tx_pop_q3 + profil5[3]) + (dfLisse$tx_pop_q4 - profil5[4])^2 / (dfLisse$tx_pop_q4 + profil5[4]) + (dfLisse$tx_pop_q5 - profil5[5])^2 / (dfLisse$tx_pop_q5 + profil5[5])
										dfLisse$distmin <- pmin(dfLisse$dist_pro1, dfLisse$dist_pro2, dfLisse$dist_pro3, dfLisse$dist_pro4, dfLisse$dist_pro5)
										for (i in 1:nrow(dfLisse)){
											if (dfLisse$distmin[i] == dfLisse$dist_pro1[i]){
												dfLisse$typMixSoc[i] <- 1
											}else if (dfLisse$distmin[i] == dfLisse$dist_pro2[i]) {dfLisse$typMixSoc[i]<- 2
											}else if (dfLisse$distmin[i] == dfLisse$dist_pro3[i]) {dfLisse$typMixSoc[i]<- 3
											}else if (dfLisse$distmin[i] == dfLisse$dist_pro4[i]) {dfLisse$typMixSoc[i]<- 4
											}else {dfLisse$typMixSoc[i]<- 5}
										}
										dfLisse <- dfLisse[, ! names(dfLisse) %in% c("niv_x_pop","dec_x_pop","dis_x_pop","dist_pro1","dist_pro2","dist_pro3","dist_pro4","dist_pro5","distmin")]

############################  filosofi 2013 ###################################
filosofi.2013.colonnesLissageClassique:= *
filosofi.2013.traitementPostLissage:= 	dfLisse$tx_mono <- round(100 * dfLisse$m_mono / dfLisse$men)
										dfLisse$tailleMen <- dfLisse$pop / dfLisse$men
										dfLisse$tx_mon_pa <- round(100 * dfLisse$m_mono_pa / dfLisse$men)
										dfLisse$tx_cosenf <- round(100 * dfLisse$m_cossenf / dfLisse$men)
										dfLisse$tx_coenf <- round(100 * dfLisse$m_coenf / dfLisse$men)
										dfLisse$tx_fseul <- round(100 * dfLisse$m_fseul / dfLisse$men)
										dfLisse$tx_hseul <- round(100 * dfLisse$m_hseul / dfLisse$men)
										dfLisse$tx_5p <- round(100 * dfLisse$m_5p / dfLisse$men)
										dfLisse$tx_5p_pa <- round(100 * dfLisse$m_5p_pa / dfLisse$men)
										dfLisse$tx_rev_sa <- round(100 * dfLisse$m_rev_sal / dfLisse$men)
										dfLisse$tx_rev_ch <- round(100 * dfLisse$m_rev_cho / dfLisse$men)
										dfLisse$tx_rev_ns <- round(100 * dfLisse$m_rev_nsa / dfLisse$men)
										dfLisse$tx_rev_re <- round(100 * dfLisse$m_rev_ret / dfLisse$men)
										dfLisse$tx_pop_pa <- round(100 * dfLisse$pop_pa / dfLisse$pop)
										dfLisse$tx_popd1 <- round(100 * dfLisse$pop_d1 / dfLisse$pop)
										dfLisse$tx_popd10 <- round(100 * dfLisse$pop_d10 / dfLisse$pop)
										dfLisse$tx_pop_q1 <- round(100 * dfLisse$pop_q1 / dfLisse$pop)
										dfLisse$tx_pop_q2 <- round(100 * dfLisse$pop_q2 / dfLisse$pop)
										dfLisse$tx_pop_q3 <- round(100 * dfLisse$pop_q3 / dfLisse$pop)
										dfLisse$tx_pop_q4 <- round(100 * dfLisse$pop_q4 / dfLisse$pop)
										dfLisse$tx_pop_q5 <- round(100 * dfLisse$pop_q5 / dfLisse$pop)
										dfLisse$niv_moy <- dfLisse$niv_x_pop / dfLisse$pop
										dfLisse$dis_moy <- dfLisse$dis_x_pop / dfLisse$pop
										dfLisse$dec_moy <- dfLisse$dec_x_pop / dfLisse$pop
										profil1 <- c(50,20,15,10,5)
										profil2 <- c(30,25,20,15,10)
										profil3 <- c(20,20,20,20,20)
										profil4 <- c(10,15,20,25,30)
										profil5 <- c(5,10,15,20,50)
										dfLisse$dist_pro1 <- (dfLisse$tx_pop_q1 - profil1[1])^2 / (dfLisse$tx_pop_q1 + profil1[1]) + (dfLisse$tx_pop_q2 - profil1[2])^2 / (dfLisse$tx_pop_q2 + profil1[2]) + (dfLisse$tx_pop_q3 - profil1[3])^2 / (dfLisse$tx_pop_q3 + profil1[3]) + (dfLisse$tx_pop_q4 - profil1[4])^2 / (dfLisse$tx_pop_q4 + profil1[4]) + (dfLisse$tx_pop_q5 - profil1[5])^2 / (dfLisse$tx_pop_q5 + profil1[5])
										dfLisse$dist_pro2 <- (dfLisse$tx_pop_q1 - profil2[1])^2 / (dfLisse$tx_pop_q1 + profil2[1]) + (dfLisse$tx_pop_q2 - profil2[2])^2 / (dfLisse$tx_pop_q2 + profil2[2]) + (dfLisse$tx_pop_q3 - profil2[3])^2 / (dfLisse$tx_pop_q3 + profil2[3]) + (dfLisse$tx_pop_q4 - profil2[4])^2 / (dfLisse$tx_pop_q4 + profil2[4]) + (dfLisse$tx_pop_q5 - profil2[5])^2 / (dfLisse$tx_pop_q5 + profil2[5])
										dfLisse$dist_pro3 <- (dfLisse$tx_pop_q1 - profil3[1])^2 / (dfLisse$tx_pop_q1 + profil3[1]) + (dfLisse$tx_pop_q2 - profil3[2])^2 / (dfLisse$tx_pop_q2 + profil3[2]) + (dfLisse$tx_pop_q3 - profil3[3])^2 / (dfLisse$tx_pop_q3 + profil3[3]) + (dfLisse$tx_pop_q4 - profil3[4])^2 / (dfLisse$tx_pop_q4 + profil3[4]) + (dfLisse$tx_pop_q5 - profil3[5])^2 / (dfLisse$tx_pop_q5 + profil3[5])
										dfLisse$dist_pro4 <- (dfLisse$tx_pop_q1 - profil4[1])^2 / (dfLisse$tx_pop_q1 + profil4[1]) + (dfLisse$tx_pop_q2 - profil4[2])^2 / (dfLisse$tx_pop_q2 + profil4[2]) + (dfLisse$tx_pop_q3 - profil4[3])^2 / (dfLisse$tx_pop_q3 + profil4[3]) + (dfLisse$tx_pop_q4 - profil4[4])^2 / (dfLisse$tx_pop_q4 + profil4[4]) + (dfLisse$tx_pop_q5 - profil4[5])^2 / (dfLisse$tx_pop_q5 + profil4[5])
										dfLisse$dist_pro5 <- (dfLisse$tx_pop_q1 - profil5[1])^2 / (dfLisse$tx_pop_q1 + profil5[1]) + (dfLisse$tx_pop_q2 - profil5[2])^2 / (dfLisse$tx_pop_q2 + profil5[2]) + (dfLisse$tx_pop_q3 - profil5[3])^2 / (dfLisse$tx_pop_q3 + profil5[3]) + (dfLisse$tx_pop_q4 - profil5[4])^2 / (dfLisse$tx_pop_q4 + profil5[4]) + (dfLisse$tx_pop_q5 - profil5[5])^2 / (dfLisse$tx_pop_q5 + profil5[5])
										dfLisse$distmin <- pmin(dfLisse$dist_pro1, dfLisse$dist_pro2, dfLisse$dist_pro3, dfLisse$dist_pro4, dfLisse$dist_pro5)
										for (i in 1:nrow(dfLisse)){
											if (dfLisse$distmin[i] == dfLisse$dist_pro1[i]){
												dfLisse$typMixSoc[i] <- 1
											}else if (dfLisse$distmin[i] == dfLisse$dist_pro2[i]) {dfLisse$typMixSoc[i]<- 2
											}else if (dfLisse$distmin[i] == dfLisse$dist_pro3[i]) {dfLisse$typMixSoc[i]<- 3
											}else if (dfLisse$distmin[i] == dfLisse$dist_pro4[i]) {dfLisse$typMixSoc[i]<- 4
											}else {dfLisse$typMixSoc[i]<- 5}
										}
										dfLisse <- dfLisse[, ! names(dfLisse) %in% c("niv_x_pop","dec_x_pop","dis_x_pop","dist_pro1","dist_pro2","dist_pro3","dist_pro4","dist_pro5","distmin")]

############################  cnaf  ###################################
cnaf.variables:= 	nbPersCouv=>non=> nombre de personnes dont le ménage est allocataire CAF
					txCouv=>non=> taux de couverture de la population française par la CNAF (cnaf 2015 / filo 2013)
					txRevCAF=>non=> taux des dossiers CAF dont le revenu provient majoritairement de la CAF (seuls sont pris en compte les dossiers dont les revenus sont connus avec précision)
					txAAH=>non=> taux des allocataires AAH parmi l'ensemble des allocataires CAF
					txRSASoc=>non=> taux des dossiers CAF percevant l'allocation RSA socle
					txRSAAct=>non=> taux des dossiers CAF percevant l'allocation RSA activité
					txAPL=>non=> taux des dossiers CAF percevant l'allocation pour le logement
					txMono=>non=> taux des dossiers CAF constitué d'une famille monoparentale
					nbRSASoc=>non=> nombre de dossiers CAF percevant l'allocation RSA socle

############################  cnaf 2015 ###################################
cnaf.2015.colonnesLissageClassique:= *
cnaf.2015.traitementPostLissage:= 	dfLisse$txCouv 		<- round(100 * dfLisse$PERSCOUV 	/ dfLisse$nbpersm) 		
									dfLisse$txRevCAF 	<- round(100 * dfLisse$N_txRevCaf 	/ dfLisse$D_txRevCaf)
									dfLisse$txAAH 		<- round(100 * dfLisse$N_txAAH		/ dfLisse$PERSCOUV)
									dfLisse$txRSASoc 	<- round(100 * dfLisse$N_txRSASoc 	/ dfLisse$nbDossiersHorsConjoint)
									dfLisse$txRSAAct 	<- round(100 * dfLisse$N_txRSAAct 	/ dfLisse$nbDossiersHorsConjoint)
									dfLisse$txAPL 		<- round(100 * dfLisse$N_txAPL 		/ dfLisse$nbDossiersHorsConjoint)
									dfLisse$txMono 		<- round(100 * dfLisse$N_txMono		/ dfLisse$nbDossiersHorsConjoint)
									dfLisse 			<- subset(dfLisse, select = -c(nbpersm, N_txRevCaf, D_txRevCaf, N_txAAH, N_txRSASoc, N_txRSAAct, N_txAPL, N_txMono, nbDossiersHorsConjoint))
									names(dfLisse)[names(dfLisse)=="PERSCOUV"] <- "nbPersCouv"
									dfLisse[dfLisse$txCouv == Inf, "txCouv"] <- 0
									dfLisse[dfLisse$txCouv > 1000, "txCouv"] <- 1000

############################  CNAM ##################
cnam.variables:= pop=>non=>population (nombre d'individus)
				 ageMoyen=>non=>âge moyen
                 sexRatio=>non=>Rapport de masculinité   Attention ! Indicateur à utiliser avec précaution
				 tx_0_5=>non=>taux des 0 à 5 ans dans la population
				 tx_5_10=>non=>taux des 5 à 10 ans dans la population
				 tx_10_15=>non=>taux des 10 à 15 ans dans la population
				 tx_15_20=>non=>taux des 15 à 20 ans dans la population
				 tx_20_25=>non=>taux des 20 à 25 ans dans la population
				 tx_25_35=>non=>taux des 25 à 35 ans dans la population
				 tx_35_45=>non=>taux des 35 à 45 ans dans la population
				 tx_45_55=>non=>taux des 45 à 55 ans dans la population
				 tx_55_65=>non=>taux des 55 à 65 ans dans la population
				 tx_65_75=>non=>taux des 65 à 75 ans dans la population
				 tx_plus75=>non=>taux des plus de 75 ans dans la population
				 txH_plus75=>non=>taux des hommes de plus de 75 ans dans la population
				 txF_plus75=>non=>taux des femmes de plus de 75 ans dans la population

############################  CNAM 2016 ###################################
cnam.2016.colonnesLissageClassique:= *
cnam.2016.traitementPostLissage:=   dfLisse$pop        <- dfLisse$nbObsLisse
									dfLisse$ageMoyen   <- 2016 - round(dfLisse$nais / dfLisse$nbObsLisse)
									dfLisse$sexRatio   <- 100 * dfLisse$homme       / dfLisse$femme
									dfLisse$tx_0_5     <- 100 * dfLisse$age_0_5     / dfLisse$nbObsLisse
									dfLisse$tx_5_10    <- 100 * dfLisse$age_5_10    / dfLisse$nbObsLisse
									dfLisse$tx_10_15   <- 100 * dfLisse$age_10_15   / dfLisse$nbObsLisse
									dfLisse$tx_15_20   <- 100 * dfLisse$age_15_20   / dfLisse$nbObsLisse
									dfLisse$tx_20_25   <- 100 * dfLisse$age_20_25   / dfLisse$nbObsLisse
									dfLisse$tx_25_35   <- 100 * dfLisse$age_25_35   / dfLisse$nbObsLisse
									dfLisse$tx_35_45   <- 100 * dfLisse$age_35_45   / dfLisse$nbObsLisse
									dfLisse$tx_45_55   <- 100 * dfLisse$age_45_55   / dfLisse$nbObsLisse
									dfLisse$tx_55_65   <- 100 * dfLisse$age_55_65   / dfLisse$nbObsLisse
									dfLisse$tx_65_75   <- 100 * dfLisse$age_65_75   / dfLisse$nbObsLisse
									dfLisse$tx_plus75  <- 100 * dfLisse$age_plus75  / dfLisse$nbObsLisse
									dfLisse$txH_plus75 <- 100 * dfLisse$ageH_plus75 / dfLisse$nbObsLisse
									dfLisse$txF_plus75 <- 100 * dfLisse$ageF_plus75 / dfLisse$nbObsLisse
									dfLisse            <- subset(dfLisse, select = -c(nais, homme, femme, age_0_5, age_5_10, age_10_15, age_15_20, age_20_25, age_25_35, age_35_45, age_45_55, age_55_65, age_65_75, age_plus75, ageH_plus75, ageF_plus75))

									
############################  sourceX  - modèle à conserver pour servir de modèle à chaque nouvelle source ou millésime ##################
# sourceX.variables:= pop=>non=>population (nombre d'individus)

############################  sourceX 2013 ###################################
# sourceX.2013.colonnesLissageClassique:= *
# sourceX.2013.traitementPostLissage:= dfLisse$tx_mono <- round(100 * dfLisse$m_mono / dfLisse$men)

